#version 300 es

precision mediump float;

uniform vec3 uDiffuseColor;
uniform vec3 uViewPosition;
uniform float uShinyness;

in vec3 vNormal;
in vec3 vFragPosition;

out vec4 fragcolor;

vec3 LIGHT_COLOR = vec3(1.0, 1.0, 1.0);
vec3 LIGHT_DIRECTION = normalize(vec3(0, 1, 0));

float ambient = 0.7;

vec3 diffuse(vec3 normal) {
	float diff = max(dot(normal, LIGHT_DIRECTION), 0.0);
	return diff * LIGHT_COLOR;
}

vec3 specular(vec3 normal) {
	float specularStrength = 0.5;
	vec3 viewDir = normalize(uViewPosition - vFragPosition);
	vec3 reflectDir = reflect(-LIGHT_DIRECTION, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShinyness);
	return specularStrength * spec * LIGHT_COLOR;
}

void main() {
	vec3 normal = normalize(vNormal);
	vec3 color = (ambient + diffuse(normal) + specular(normal)) * uDiffuseColor;
	fragcolor = vec4(color, 1.0);
}#version 300 es

layout(location = 0) in vec3 aPosition;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec3 aModelTranslation;
layout(location = 3) in vec4 aModelRotation;
layout(location = 4) in vec3 aModelScale;
layout(location = 5) in mat4 aModelMatrix;

uniform mat4 uProjectionMatrix;
uniform mat4 uViewMatrix;

out vec3 vNormal;
out vec3 vFragPosition;

void main() {
	vNormal = aNormal;
	vFragPosition = vec3(aModelMatrix * vec4(aPosition, 1.0));
	gl_Position = uProjectionMatrix * uViewMatrix * aModelMatrix * vec4(aPosition, 1.0);
}